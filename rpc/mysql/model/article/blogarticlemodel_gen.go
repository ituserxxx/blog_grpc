// Code generated by goctl. DO NOT EDIT.

package article

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	blogArticleFieldNames          = builder.RawFieldNames(&BlogArticle{})
	blogArticleRows                = strings.Join(blogArticleFieldNames, ",")
	blogArticleRowsExpectAutoSet   = strings.Join(stringx.Remove(blogArticleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	blogArticleRowsWithPlaceHolder = strings.Join(stringx.Remove(blogArticleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	blogArticleModel interface {
		Insert(ctx context.Context, data *BlogArticle) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BlogArticle, error)
		Update(ctx context.Context, data *BlogArticle) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBlogArticleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BlogArticle struct {
		Id         int64        `db:"id"`
		Title      string       `db:"title"`
		Content    string       `db:"content"`
		CreateTime time.Time    `db:"create_time"`
		UpdateTime sql.NullTime `db:"update_time"`
		Status     int64        `db:"status"` // 1-发布，2-草稿
	}
)

func newBlogArticleModel(conn sqlx.SqlConn) *defaultBlogArticleModel {
	return &defaultBlogArticleModel{
		conn:  conn,
		table: "`blog_article`",
	}
}

func (m *defaultBlogArticleModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBlogArticleModel) FindOne(ctx context.Context, id int64) (*BlogArticle, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", blogArticleRows, m.table)
	var resp BlogArticle
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBlogArticleModel) Insert(ctx context.Context, data *BlogArticle) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, blogArticleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Title, data.Content, data.Status)
	return ret, err
}

func (m *defaultBlogArticleModel) Update(ctx context.Context, data *BlogArticle) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, blogArticleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Title, data.Content, data.Status, data.Id)
	return err
}

func (m *defaultBlogArticleModel) tableName() string {
	return m.table
}
