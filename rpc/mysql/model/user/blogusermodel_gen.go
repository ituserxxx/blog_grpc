// Code generated by goctl. DO NOT EDIT.

package user

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	blogUserFieldNames          = builder.RawFieldNames(&BlogUser{})
	blogUserRows                = strings.Join(blogUserFieldNames, ",")
	blogUserRowsExpectAutoSet   = strings.Join(stringx.Remove(blogUserFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	blogUserRowsWithPlaceHolder = strings.Join(stringx.Remove(blogUserFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"
)

type (
	blogUserModel interface {
		Insert(ctx context.Context, data *BlogUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BlogUser, error)
		FindOneByUsername(ctx context.Context, username string) (*BlogUser, error)
		Update(ctx context.Context, data *BlogUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBlogUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BlogUser struct {
		Id           int64          `db:"id"`
		Username     string         `db:"username"`
		Password     string         `db:"password"`
		Avatar       sql.NullString `db:"avatar"`
		Introduction sql.NullString `db:"introduction"`
		Nickname     sql.NullString `db:"nickname"`
		About        sql.NullString `db:"about"`
	}
)

func newBlogUserModel(conn sqlx.SqlConn) *defaultBlogUserModel {
	return &defaultBlogUserModel{
		conn:  conn,
		table: "`blog_user`",
	}
}

func (m *defaultBlogUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBlogUserModel) FindOne(ctx context.Context, id int64) (*BlogUser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", blogUserRows, m.table)
	var resp BlogUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBlogUserModel) FindOneByUsername(ctx context.Context, username string) (*BlogUser, error) {
	var resp BlogUser
	query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", blogUserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBlogUserModel) Insert(ctx context.Context, data *BlogUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, blogUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Username, data.Password, data.Avatar, data.Introduction, data.Nickname, data.About)
	return ret, err
}

func (m *defaultBlogUserModel) Update(ctx context.Context, newData *BlogUser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, blogUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Username, newData.Password, newData.Avatar, newData.Introduction, newData.Nickname, newData.About, newData.Id)
	return err
}

func (m *defaultBlogUserModel) tableName() string {
	return m.table
}
